<?xml version="1.0"?>
<exercises xml:id="chapter7_multiple-choice-exercises">
  <title>Multiple Choice Exercises</title>
  <exercise label="mce_7_1">
    <statement>
      <p>Which variables below is declared as a <c>string</c> type?</p>
      <program language="cpp"
               line-numbers="yes">
        <code>
int main() {
  int x = 0;
  double y = 4.5;
  string word = "hello";
  string letter = "a";
  char c = 'c';
  bool isPrime = 1;
}
</code>
      </program>
    </statement>
    <choices>
      <choice>
        <statement>
          <p>
            <c>x</c>
          </p>
        </statement>
        <feedback><p>
          <c>x</c> is an <c>int</c>.
        </p></feedback>
      </choice>
      <choice>
        <statement>
          <p>
            <c>y</c>
          </p>
        </statement>
        <feedback><p>
          <c>y</c> is a <c>double</c>.
        </p></feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>
            <c>word</c>
          </p>
        </statement>
        <feedback><p>
          <c>word</c> is a <c>string</c>.
        </p></feedback>
      </choice>
      <choice>
        <statement>
          <p>
            <c>"hello"</c>
          </p>
        </statement>
        <feedback><p>
          <q>hello</q> is not a variable.
        </p></feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>
            <c>letter</c>
          </p>
        </statement>
        <feedback><p>
          <c>letter</c> is a <c>string</c>.
        </p></feedback>
      </choice>
      <choice>
        <statement>
          <p>
            <c>c</c>
          </p>
        </statement>
        <feedback><p>
          <c>c</c> is a <c>char</c>.
        </p></feedback>
      </choice>
      <choice>
        <statement>
          <p>
            <c>isPrime</c>
          </p>
        </statement>
        <feedback><p>
          <c>isPrime</c> is a <c>bool</c>.
        </p></feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="mce_7_2">
    <statement>
      <p>What value should replace the question mark to output the character &#x2018;p'?</p>
      <program language="cpp"
               line-numbers="yes">
        <code><![CDATA[
int main() {
  string quote = "Not my tempo.";
  cout << quote[?];
}
]]></code>
      </program>
    </statement>
    <choices>
      <choice>
        <statement>
          <p>11</p>
        </statement>
        <feedback><p>
          Remember that indexing begins at 0 in C++.
        </p></feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>10</p>
        </statement>
        <feedback><p>
          &#x2018;p' is located at index 10 in quote.
        </p></feedback>
      </choice>
      <choice>
        <statement>
          <p>4</p>
        </statement>
        <feedback><p>
          The character &#x2018;m' is located at index 4.
        </p></feedback>
      </choice>
      <choice>
        <statement>
          <p>0</p>
        </statement>
        <feedback><p>
          The character <q>N</q> is located at index 0.
        </p></feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="mce_7_3">
    <statement>
      <p>What is the output of the code below?</p>
      <program language="cpp"
               line-numbers="yes">
        <code><![CDATA[
int main() {
  string quote = "I love you 3000.";
  int x = 3;
  int y = 3 * x;
  int z = 1;
  if (y > 12) {
    z = z + x + y;
  }
  else {
    z = z + y - x;
  }
  cout << quote[z];
}
]]></code>
      </program>
    </statement>
    <choices>
      <choice>
        <statement>
          <p>I</p>
        </statement>
        <feedback><p>
          The value of <c>z</c> is not 0.
        </p></feedback>
      </choice>
      <choice>
        <statement>
          <p>0</p>
        </statement>
        <feedback><p>
          The value of <c>z</c> is not greater than 11.
        </p></feedback>
      </choice>
      <choice>
        <statement>
          <p>o</p>
        </statement>
        <feedback><p>
          The value of <c>z</c> is not 3.
        </p></feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>y</p>
        </statement>
        <feedback><p>
          The final value of <c>z</c> is 7, and &#x2018;y' is at index 7 of <c>quote</c>.
        </p></feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="mce_7_4">
    <statement>
      <p>What is the output of the code below?</p>
      <program language="cpp"
               line-numbers="yes">
        <code><![CDATA[
int main() {
  string quote = "Look at me. I'm the captain now.";
  int x = quote.length();
  cout << quote[x];
}
]]></code>
      </program>
    </statement>
    <choices>
      <choice>
        <statement>
          <p>-1</p>
        </statement>
        <feedback><p>
          -1 is not in <c>quote</c>.
        </p></feedback>
      </choice>
      <choice>
        <statement>
          <p>w</p>
        </statement>
        <feedback><p>
          <c>x</c> is not the index value of the character &#x2018;w'.
        </p></feedback>
      </choice>
      <choice>
        <statement>
          <p>.</p>
        </statement>
        <feedback><p>
          <c>x</c> is not the index value of the last period.
        </p></feedback>
      </choice>
      <choice>
        <statement>
          <p>&#x2018; &#x2018;</p>
        </statement>
        <feedback><p>
          It might be logical to think that memory outside of the <c>string</c> is empty space, but
            there could be leftover junk values.
        </p></feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>Error, we are indexing out of bounds.</p>
        </statement>
        <feedback><p>
          <c>x</c> has a value of 32 and there is no index 32 in <c>quote</c>.
        </p></feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="mce_7_5">
    <statement>
      <p>What is the output of the code below?</p>
      <program language="cpp"
               line-numbers="yes">
        <code><![CDATA[
int main() {
  string quote = "With great power comes great responsiblity.";
  size_t n = 0;
  while (n < quote.length()) {
    if (n % 5 == 0) {
      cout << quote[n];
    }
    n++;
  }
}
]]></code>
      </program>
    </statement>
    <choices>
      <choice>
        <statement>
          <p>teeest</p>
        </statement>
        <feedback><p>
          Remember that indexing begins at 0 in C++.
        </p></feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>Wg reeest</p>
        </statement>
        <feedback><p>
          If we print out every fifth character, including the first, this is the answer.
        </p></feedback>
      </choice>
      <choice>
        <statement>
          <p>ith reatpowe coms grat rsponibliy.</p>
        </statement>
        <feedback><p>
          This is what we would get if we removed every fifth character.
        </p></feedback>
      </choice>
      <choice>
        <statement>
          <p>With great power comes great responsiblity.</p>
        </statement>
        <feedback><p>
          Take a look at the conditional in the while loop.
        </p></feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="mce_7_6">
    <statement>
      <p>What is the output of the code below?</p>
      <program language="cpp"
               line-numbers="yes">
        <code><![CDATA[
int main() {
  string quote = "Why so serious?";
  size_t index = quote.find("a");
  cout << index;
}
]]></code>
      </program>
    </statement>
    <choices>
      <choice correct="yes">
        <statement>
          <p>
            <c>string::npos</c>
          </p>
        </statement>
        <feedback><p>
          Since &#x2018;a' is not found in <c>quote</c>, the <c>find</c> function returns <c>string::npos</c>.
        </p></feedback>
      </choice>
      <choice>
        <statement>
          <p>0</p>
        </statement>
        <feedback><p>
          The character at index 0 is &#x2018;W'.
        </p></feedback>
      </choice>
      <choice>
        <statement>
          <p>8</p>
        </statement>
        <feedback><p>
          The character at index 8 is &#x2018;e'.
        </p></feedback>
      </choice>
      <choice>
        <statement>
          <p>15</p>
        </statement>
        <feedback><p>
          There is no index <c>15</c> in quote.
        </p></feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="mce_7_7">
    <statement>
      <p>What is the output of the code below?</p>
      <program language="cpp"
               line-numbers="yes">
        <code><![CDATA[
int main() {
  string quote = "How much wood could a woodchuck chuck if a woodchuck could chuck wood?";
  size_t index = quote.find("wood");
  cout << index;
}
]]></code>
      </program>
    </statement>
    <choices>
      <choice>
        <statement>
          <p>4</p>
        </statement>
        <feedback><p>
          Although <q>wood</q> appears four times in the <c>string</c>, that is not what the <c>find</c>
            function returns.
        </p></feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>9</p>
        </statement>
        <feedback><p>
          The index of &#x2018;w' in the first <q>wood</q> is at index 9.
        </p></feedback>
      </choice>
      <choice>
        <statement>
          <p>10</p>
        </statement>
        <feedback><p>
          Remember indexing begins at 0 in C++.
        </p></feedback>
      </choice>
      <choice>
        <statement>
          <p>12</p>
        </statement>
        <feedback><p>
          The <c>find</c> function returns the index of the first character of the found string.
        </p></feedback>
      </choice>
      <choice>
        <statement>
          <p>22</p>
        </statement>
        <feedback><p>
          The <c>find</c> function returns the index of the first character of the found string.
        </p></feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="mce_7_8">
    <statement>
      <p>What is the output of the code below?</p>
      <program language="cpp"
               line-numbers="yes">
        <code><![CDATA[
int main() {
  string quote = "How much wood could a woodchuck chuck if a woodchuck could chuck wood?";
  size_t index = quote.find('w', quote.find("wood") + 1);
  cout << index;
}
]]></code>
      </program>
    </statement>
    <choices>
      <choice>
        <statement>
          <p>9</p>
        </statement>
        <feedback><p>
          Take a closer look at the starting index for where we should start looking.
        </p></feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>22</p>
        </statement>
        <feedback><p>
          After the first &#x2018;w', the second &#x2018;w' appears at index 22.
        </p></feedback>
      </choice>
      <choice>
        <statement>
          <p>43</p>
        </statement>
        <feedback><p>
          Take a closer look at the <c>find</c> function and its arguments.
        </p></feedback>
      </choice>
      <choice>
        <statement>
          <p>65</p>
        </statement>
        <feedback><p>
          Take a closer look at the <c>find</c> function and its arguments.
        </p></feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="mce_7_9">
    <statement>
      <p>What is the output of the code below?</p>
      <program language="cpp"
               line-numbers="yes">
        <code><![CDATA[
int main() {
  string quote = "Life is like a box of chocolates. You never know what you're gonna get.";
  size_t i = 0;
  size_t count = 0;
  while (i < quote.length()) {
    if (quote[i] == 'e') {
      count++;
    }
    i++;
  }
  cout << count;
}
]]></code>
      </program>
    </statement>
    <choices>
      <choice>
        <statement>
          <p>0</p>
        </statement>
        <feedback><p>
          Are there any occurences of the letter &#x2018;e' in <c>quote</c>?
        </p></feedback>
      </choice>
      <choice>
        <statement>
          <p>6</p>
        </statement>
        <feedback><p>
          Count the number of &#x2018;e's in <c>quote</c>.
        </p></feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>7</p>
        </statement>
        <feedback><p>
          There are 7 occurences of the letter &#x2018;e' in <c>quote</c>.
        </p></feedback>
      </choice>
      <choice>
        <statement>
          <p>12</p>
        </statement>
        <feedback><p>
          Count the number of &#x2018;e's in <c>quote</c>.
        </p></feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="mce_7_10">
    <statement>
      <p>What is the output of the code below?</p>
      <program language="cpp"
               line-numbers="yes">
        <code><![CDATA[
int main() {
  string call = "Marco!";
  string response = "Polo!";
  string output = "call" + "response";
  cout << output;
}
]]></code>
      </program>
    </statement>
    <choices>
      <choice>
        <statement>
          <p>Marco! Polo!</p>
        </statement>
        <feedback><p>
          Take a closer look at the initialization of <c>output</c>.
        </p></feedback>
      </choice>
      <choice>
        <statement>
          <p>Marco!Polo!</p>
        </statement>
        <feedback><p>
          Take a closer look at the initialization of <c>output</c>.
        </p></feedback>
      </choice>
      <choice>
        <statement>
          <p>call response</p>
        </statement>
        <feedback><p>
          Can we concatenate <q>call</q> and <q>response</q>?
        </p></feedback>
      </choice>
      <choice>
        <statement>
          <p>callresponse</p>
        </statement>
        <feedback><p>
          Can we concatenate <q>call</q> and <q>response</q>?
        </p></feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>Error!</p>
        </statement>
        <feedback><p>
          We cannot concatenate native C strings like <q>call</q> and <q>response</q>, so this
            code results in an error.
        </p></feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="mce_7_11">
    <statement>
      <p>An error occured while delivering a message. All instances of the letter &#x2018;s'
        got replaced by &#x2018;X's. Can you complete the code below to fix this error by selecting
        the correct line of code to replace the question marks?</p>
      <program language="cpp"
               line-numbers="yes">
        <code><![CDATA[
int main() {
  string question = "Honey? Where'X my Xuper Xuit?";
  size_t i = 0;
  while (i < question.length()) {
    if (question[i] == 'X') {
      ?????
    }
    i++;
  }
  cout << question;
}
]]></code>
      </program>
    </statement>
    <choices>
      <choice>
        <statement>
          <p>
            <c>question['X'] = 's';</c>
          </p>
        </statement>
        <feedback><p>
          The argument in the <c>[]</c> operator should be a position in the string.
        </p></feedback>
      </choice>
      <choice>
        <statement>
          <p>
            <c>'s' = question[i];</c>
          </p>
        </statement>
        <feedback><p>
          Check the order of your assignment.
        </p></feedback>
      </choice>
      <choice>
        <statement>
          <p>
            <c>'X' = 's';</c>
          </p>
        </statement>
        <feedback><p>
          We cannot assign the value of &#x2018;s' to &#x2018;X'.
        </p></feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>
            <c>question[i] = 's';</c>
          </p>
        </statement>
        <feedback><p>
          This will successfully replace all instances of &#x2018;X' with &#x2018;s'.
        </p></feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="mce_7_12">
    <statement>
      <p>What is the output of the code below?</p>
      <program language="cpp"
               line-numbers="yes">
        <code><![CDATA[
int main() {
  cout << ("butter" < "butterfly");
}
]]></code>
      </program>
    </statement>
    <choices>
      <choice>
        <statement>
          <p>butterbutterfly</p>
        </statement>
        <feedback><p>
          The operator between <q>butter</q> and <q>butterfly</q> is the <c>&lt;</c> operator, not <c>&lt;&lt;</c>
            .
        </p></feedback>
      </choice>
      <choice>
        <statement>
          <p>0</p>
        </statement>
        <feedback><p>
          Does <q>butter</q> come before or after <q>butterfly</q>?
        </p></feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>1</p>
        </statement>
        <feedback><p>
          <q>butter</q> comes before <q>butterfly</q> in the dictionary.
        </p></feedback>
      </choice>
      <choice>
        <statement>
          <p>False</p>
        </statement>
        <feedback><p>
          In C++, boolean values are outputted as either a 0 or 1.
        </p></feedback>
      </choice>
      <choice>
        <statement>
          <p>True</p>
        </statement>
        <feedback><p>
          In C++, boolean values are outputted as either a 0 or 1.
        </p></feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="mce_7_13">
    <statement>
      <p>What is the output of the code below?</p>
      <program language="cpp"
               line-numbers="yes">
        <code><![CDATA[
int main() {
   string quote = "Suffering builds character";
   size_t count = 0;
   size_t index = 17;
   while ( index != quote.length() ) {
     if ( quote[index] == 'a' || quote[index] == 'e' ) {
       count = count + index;
     }
     index = index + 1;
   }
   cout << count << endl;
}
]]></code>
      </program>
    </statement>
    <choices>
      <choice>
        <statement>
          <p>3</p>
        </statement>
        <feedback><p>
          The code is not counting the number of a's or e's after position 17. Rather adding up
            their indices.
        </p></feedback>
      </choice>
      <choice>
        <statement>
          <p>4</p>
        </statement>
        <feedback><p>
          The code is not counting the number of a's or e's. Rather adding up their indices.
        </p></feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>64</p>
        </statement>
        <feedback><p>
          Correct! the occurences of &#x2018;a' are 19 and 21, while that of &#x2018;e' is 24
            (after <c>index</c> 17). The total is 64.
        </p></feedback>
      </choice>
      <choice>
        <statement>
          <p>68</p>
        </statement>
        <feedback><p>
          The first occurence of &#x2018;e' is at index 4 so it is not counted.
        </p></feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="mce_7_14">
    <statement>
      <p>What is the output of the code below?</p>
      <program language="cpp"
               line-numbers="yes">
        <code><![CDATA[
int main() {
   string quote = "Its Bond, James Bond";
   size_t index = 1;
   while( index < quote.length() ) {
     quote[index] = 'M';
     index = index * 2;
   }
   cout << quote << endl;
}
]]></code>
      </program>
    </statement>
    <choices>
      <choice correct="yes">
        <statement>
          <p>
            <q>IMM MondM James Mond</q>
          </p>
        </statement>
        <feedback><p>
          Correct! We change indices 1,2,4,8,16 to M before <c>index</c> becomes <c>&gt;</c> <c>quote.length()</c>.
        </p></feedback>
      </choice>
      <choice>
        <statement>
          <p>
            <q>IMMMMMMMMMMMMMMMMMMM</q>
          </p>
        </statement>
        <feedback><p>
          We are not increasing <c>index</c> by 1, instead we are doubling it.
        </p></feedback>
      </choice>
      <choice>
        <statement>
          <p>
            <q>MMM MondM James Mond</q>
          </p>
        </statement>
        <feedback><p>
          We don't start at position 0 this time.
        </p></feedback>
      </choice>
      <choice>
        <statement>
          <p>
            <q>IMsMBMnM,MJMmMsMBMnM</q>
          </p>
        </statement>
        <feedback><p>
          we are not increasing <c>index</c> by 2, instead we are doubling it.
        </p></feedback>
      </choice>
    </choices>
  </exercise>
</exercises>
