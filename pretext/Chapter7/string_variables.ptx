<?xml version="1.0"?>
<section xml:id="chapter7_string-variables">
  <title><c>string</c> variables</title>
  <p>You can create a variable with type <c>string</c> in the usual ways.</p>
  <listing label="string_variables_AC_1">
    <caption>
      <p>In the active code below, the first line creates a <c>string</c> without
            giving it a value. The second line assigns it the string value <c>"Hello,"</c>.
            The third line is a combined declaration and assignment, also called an initialization.</p>
    </caption>
    <program xml:id="string_variables_AC_1_editor" interactive="activecode" language="cpp" line-numbers="yes">
      <input><![CDATA[
#include <iostream>
using namespace std;

int main() {
    string first;
    first = "Hello, ";
    string second = "world.";
}
        ]]></input>
    </program>
  </listing>
  <p>Normally when string values like <c>"Hello, "</c> or <c>"world."</c> appear,
            they are treated as C strings. In this case, when we assign them to an
            <c>string</c> variable, they are converted automatically to <c>string</c>
            values.</p>
  <p>We can output strings in the usual way:</p>
  <pre>cout &lt;&lt; first &lt;&lt; second &lt;&lt; endl;</pre>
  <p>In order to compile this code, you will have to include the header file
            for the <c>string</c> class, and you will have to add the file <c>string</c>
            to the list of files you want to compile. The details of how to do this
            depend on your programming environment.</p>
  <listing label="string_variables_AC_2">
    <caption>
      <p>Run the active code below!</p>
    </caption>
    <program xml:id="string_variables_AC_2_editor" interactive="activecode" language="cpp" line-numbers="yes">
      <input><![CDATA[
#include <iostream>
using namespace std;

int main() {
    string first;
    first = "Hello, ";
    string second = "world.";
    cout << first << second << endl;
}
        ]]></input>
    </program>
  </listing>
  <listing label="string_variables_1" numbered="yes" adaptive="yes" indentation="hide" language="python">
    <caption>
      <p>Construct a block of code that correctly prints out a string variable.</p>
    </caption>
    <blocks>
      <block order="1">
        <cline>string x;</cline>
        <cline>x = "It is cold outside!";</cline>
        <cline>x = "It is cold outside" </cline>
        <cline>cout &lt;&lt; x &lt;&lt; endl;</cline>
      </block>
    </blocks>
  </listing>
  <listing label="string_variables_2">
    <caption>
      <p>How would you initialize a string?</p>
    </caption>
    <choices>
      <choice correct="yes">
        <caption>
          <p>string x = "Hello";</p>
        </caption>
        <feedback>
          <p>This is the correct way to initialize a string.</p>
        </feedback>
      </choice>
      <choice>
        <caption>
          <p>x = "Hello";</p>
        </caption>
        <feedback>
          <p>This is an assignment.</p>
        </feedback>
      </choice>
      <choice>
        <caption>
          <p>string x;</p>
        </caption>
        <feedback>
          <p>This is a declaration.</p>
        </feedback>
      </choice>
    </choices>
  </listing>
  <listing label="string_variables_3">
    <caption>
      <p>Click on each spot where a string assignment occurs.</p>
    </caption>
    <feedback>
      <p>Remember, square brackets [] are used to access a character in a string.</p>
    </feedback>
    <areas>
      <cline>
        <area correct="no">def main() {</area>
      </cline>
      <cline>
        <area correct="no">string fruit;</area>
      </cline>
      <cline>
        <area correct="yes">fruit = "apple";</area>
      </cline>
      <cline>
        <area correct="yes">fruit = "pear";</area>
      </cline>
      <cline>
        <area correct="no">string flavor;</area>
      </cline>
      <cline>
        <area correct="yes">flavor = "vanilla";</area>
      </cline>
      <cline>}</cline>
    </areas>
  </listing>
</section>
