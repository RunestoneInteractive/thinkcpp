<?xml version="1.0"?>
<section xml:id="chapter4_infinite-recursion">
  <title>Infinite Recursion</title>
  <p>In the examples in the previous section, notice that each time the functions get called
    recursively, the argument gets smaller by one, so eventually it gets to zero. When the argument
    is zero, the function returns immediately, <em>without making any recursive calls</em>. This
    case&#x2014;when the function completes without making a recursive call&#x2014;is called the <term>base
    case</term>.</p>
  <p>If a recursion never reaches a base case, it will go on making recursive calls forever and the
    program will never terminate. This is known as <term>infinite recursion</term>, and it is
    generally not considered a good idea.</p>
  <p>In most programming environments, a program with an infinite recursion
    will not really run forever. Eventually, something will break and the
    program will report an error.</p>
  <warning>
    <p>Infinite recursion is the first example we have seen of a run-time
      error (an error that does not appear until you run the program).</p>
  </warning>
  <p>You should write a small program that recurses forever and run it to see what happens. Below is
    an example. The function adds to the number <term>n</term> instead of subtracting, which means
    it is always larger than 0. Therefore, the function executes <q>forever.</q> If you tried to run
    the program, it would run until it exhausted the available memory for its call stack and crashed.
    (If you run a infinitely recursive program in an Activecode in this book, it will be terminated
    automatically after a few seconds and you will get an error message.)</p>
  <program>#include &lt;iostream&gt;
#include &lt;cmath&gt;
using namespace std;

void nLines(int n) {
  if (n &gt; 0) {
    cout &lt;&lt; endl;
    nLines(n + 1);
  }
}

int main() {
  void nLines(10);
}</program>
  <exercise label="unbounded_recursion_1">
    <statement>
      <p>If a recursive function never reaches its <fillin mode="string" case="insensitive" answer="base"/> case, then the function will continue
        executing indefinitely. This is called <fillin mode="string" case="insensitive" answer="infinite"/> recursion. </p>
    </statement>
    <evaluation>
      <evaluate>
        <test>
          <strcmp use-answer="yes"/>
        </test>
      </evaluate>
      <evaluate>
        <test>
          <strcmp use-answer="yes"/>
        </test>
      </evaluate>
    </evaluation>
  </exercise>
  <exercise label="unbounded_recursion_2">
    <statement>
      <p>Take a look at the code below. What will happen if you were to run it on
        your machine?</p>
      <program>#include &lt;iostream&gt;
using namespace std;

void isNegative(int n) {
  if (n &gt;= 0) {
    cout &lt;&lt; "Not Negative!";
    isNegative(n - 1);
  }
  cout &lt;&lt; "Negative!";
}

int main() {
  isNegative(-10);
}</program>
    </statement>
    <choices>
      <choice>
        <statement>
          <p>The function will print "Not Negative!"</p>
        </statement>
        <feedback>
          The function will never print "Not Negative!" since we start with a negative number!
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>The function will print "Not Negative!" more than once. Then it will print "Negative!"
            and will stop executing.</p>
        </statement>
        <feedback>
          The function will never print "Not Negative!" since we start with a negative number!
        </feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>The function will print "Negative!"</p>
        </statement>
        <feedback>
          We start with a negative number, so the function will reach the base case.
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>The function will never stop executing, there will be infinite recursion.</p>
        </statement>
        <feedback>
          We start with a negative number, so the function will reach the base case.
        </feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="unbounded_recursion_3">
    <statement>
      <p><c>isNegative</c> is defined exactly as it was above, but we have changed the call to it in <c>main</c>.
        What will happen if we run the code with this input?</p>
      <program>#include &lt;iostream&gt;
using namespace std;

void isNegative(int n) {
  if (n &gt;= 0) {
    cout &lt;&lt; "Not Negative!";
    isNegative(n - 1);
  }
  cout &lt;&lt; "Negative!";
}

int main() {
  isNegative(10);
}</program>
    </statement>
    <choices>
      <choice>
        <statement>
          <p>The function will print "Not Negative!"</p>
        </statement>
        <feedback>
          The function will print "Not Negative!", but it won't stop there!
        </feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>The function will print "Not Negative!" more than once. Then it will print "Negative!"
            and will stop executing.</p>
        </statement>
        <feedback>
          The function will print "Not Negative!" until it reaches a negative number.
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>The function will print "Negative!"</p>
        </statement>
        <feedback>
          The function will eventually print "Not Negative!", but that's not all!
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>The function will never stop executing, there will be infinite recursion.</p>
        </statement>
        <feedback>
          Since we decrement each time, the base case will be reached.
        </feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="unbounded_recursion_4">
    <statement>
      <p>The <c>isNegative</c> function has been <term>edited</term> as shown below. What will happen now when
        we run the code?</p>
      <program>#include &lt;iostream&gt;
using namespace std;

void isNegative(int n) {
  if (n &gt;= 0) {
    cout &lt;&lt; "Not Negative!";
    isNegative(n + 1);
  }
  cout &lt;&lt; "Negative!";
}

int main() {
  isNegative(10);
}</program>
    </statement>
    <choices>
      <choice>
        <statement>
          <p>The function will print "Not Negative!"</p>
        </statement>
        <feedback>
          The function will print "Not Negative!" but it won't stop there!
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>The function will print "Not Negative!" more than once. Then it will print "Negative!"
            and will stop executing.</p>
        </statement>
        <feedback>
          The function will print "Not Negative!" more than once. But will it print "Negative"?
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>The function will print "Negative!"</p>
        </statement>
        <feedback>
          We start with a positive number, so the function simply won't print "Not Negative!"
        </feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>The function will never stop executing, there will be infinite recursion.</p>
        </statement>
        <feedback>
          Our input is incremented with every recursive call, so if we start with a positive
            number, we will never reach the base case.
        </feedback>
      </choice>
    </choices>
  </exercise>
</section>