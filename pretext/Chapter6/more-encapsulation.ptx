<?xml version="1.0"?>
<section xml:id="chapter6_more-encapsulation">
  <title>More encapsulation</title>
  <p>To demonstrate encapsulation again, I'll take the code from the previous
    section and wrap it up in a function:</p>
  <program>void printMultTable() {
  int i = 1;
  while (i &lt;= 6) {
    printMultiples(i);
    i = i + 1;
  }
}</program>
  <p>The process I am demonstrating is a common development plan. You develop code gradually by
    adding lines to <c>main</c> or someplace else, and then when you get it working, you extract it and
    wrap it up in a function.</p>
  <p>The reason this is useful is that you sometimes don't know when you
    start writing exactly how to divide the program into functions. This
    approach lets you design as you go along.</p>
  <exercise label="more_encapsulation_AC_1">
    <statement>
      <p>The active code below uses the <c>printMultTable</c> function. Run the active code to see what happens!</p>
    </statement>
    <program xml:id="more_encapsulation_AC_1_editor"
             interactive="activecode"
             line-numbers="yes">
      <input><![CDATA[
#include <iostream>
using namespace std;

void printMultiples(int n) {
    int i = 1;
    while (i <= 6) {
        cout << n * i << '\t';
        i = i + 1;
    }
    cout << endl;
}

void printMultTable() {
    int i = 1;
    while (i <= 6) {
        printMultiples(i);
        i = i + 1;
    }
}

int main() {
    printMultTable();
}
        ]]></input>
    </program>
  </exercise>
</section>