<?xml version="1.0"?>
<section xml:id="chapter2_activecode-exercises">
  <title>Activecode Exercises</title>
  <p>Answer the following <term>Activecode</term> questions to assess what you have learned in this
    chapter.</p>
  <exercise label="VARS_a1">
    <statement>
      <p>Fix the code below so that it runs without errors. Hint: you might need to change the names
        of some variables.</p>
    </statement>
    <program interactive="activecode"
             language="cpp"
             line-numbers="yes"
             xml:id="VARS_a1q_editor">
      <input><![CDATA[
#include <iostream>
using namespace std;

int main () {
    char true = 'T';
    char false = 'F';

    cout << true << " is short for true. ";
    cout << false << " is short for false." << endl;
}
        ]]></input>
    </program>
  </exercise>
  <solution> Below is one way to fix the program. true and false are keywords, so they cannot be
    used as variable names. <program xml:id="VARS_a1a_editor"
             language="cpp"
             line-numbers="yes"><input><![CDATA[
           #include <iostream>
           using namespace std;
           
           int main () {
               char t = 'T';
               char f = 'F';
               cout << t << " is short for true. ";
               cout << f << " is short for false." << endl;
           }
                   ]]></input></program>
  </solution>


  <exercise label="VARS_a2">
    <statement>
      <p>Finish the code below so that it prints <q>I drive a 2014 Buick Regal</q>. Select the
        Parsonsprob tab for hints for the construction of the code.</p>
    </statement>
    <program xml:id="VARS_a2_editor"
             interactive="activecode"
             language="cpp"
             line-numbers="yes">
      <input><![CDATA[
#include <iostream>
using namespace std;

int main () {
    string make;
    make = "Buick"

    // Finish the rest of the assignment statements by assigning
    // 2014 and Regal to their respective variables.

    // DO NOT MODIFY ANYTHING BELOW THIS LINE.
    cout << "I drive a " << year << " " << make << " ";
    cout << model << endl;
}
    ]]></input>
    </program>
  </exercise>


  <exercise label="VARS_a3">
    <statement>
      <p>Fix the code below so that it prints <q>Cady scored 90% on the exam.</q></p>
    </statement>
    <program interactive="activecode"
             language="cpp"
             line-numbers="yes"
             xml:id="VARS_a3q_editor">
      <input><![CDATA[
#include <iostream>
using namespace std;

int main() {
    // Modify the next line so that Cady = 0.9.
    int Cady = 3 * 5 * (6 / 100);

    // DO NOT MODIFY ANYTHING BELOW THIS LINE.
    cout << "Cady scored " << Cady * 100 << "% on the exam.";
}
        ]]></input>
    </program>
  </exercise>
  <solution> Below is one way to fix the program. We want to use doubles so that our result isn't
    rounded down to 0 through integer division. <program xml:id="VARS_a3a_editor"
             language="cpp"
             line-numbers="yes"><input><![CDATA[
#include <iostream>
using namespace std;

int main() {
    double Cady = 3 * 5 * (6 / 100.0);
    cout << "Cady scored " << Cady * 100 << "% on the exam.";
}
        ]]></input></program>
  </solution>

  <exercise label="VARS_a4">
    <statement>
      <p>Finish the code below so that it returns the correct volume of a sphere. Select the
        Pseudocode tab for hints for the construction of the code.
        Hint: think about what happens when you use integer division. The volume of a sphere is
        given by V = (4/3)(pi)(r^3).</p>
    </statement>
    <program xml:id="VARS_a4_ps_editor"
             interactive="activecode"
             language="cpp"
             line-numbers="yes">
      <input><![CDATA[
#include <iostream>
using namespace std;

int main () {
    int radius = 5;
    double pi = 3.14;

    // Use these variables and the formula for volume to complete the next line.
    volume =

    // DO NOT MODIFY ANYTHING BELOW THIS LINE.
    cout << "Your solution had volume = " << volume << endl;  cout << "The correct solution has volume = 104.667";
}
    ]]></input>
    </program>
  </exercise>

  <exercise label="VARS_a5">
    <statement>
      <p>Fix the code below so that assigns <c>a</c> its correct value of <c>'a'</c>. Hint: use
        character operations!</p>
    </statement>
    <program interactive="activecode"
             language="cpp"
             line-numbers="yes"
             xml:id="VARS_a5q_editor">
      <input><![CDATA[
#include <iostream>
using namespace std;

int main () {
    char a = 's';

    // Fix the line below.  Do NOT change the numbers!  Instead,
    // change the location of the parentheses.
    a = a - 3 * 4 + (1 + 3);

    // DO NOT MODIFY ANYTHING BELOW THIS LINE.
    cout << a;
}
        ]]></input>
    </program>
  </exercise>
  <solution> Below is one way to complete the program. There are many creative ways that you could
    use the order of operations to come up with a complex expression that will bring you to 'a',
    here is one way. <program xml:id="VARS_a5a_editor"
             language="cpp"
             line-numbers="yes"><input><![CDATA[
#include <iostream>
using namespace std;

int main () {
    char a = 's';
    a = a - (3 * (4 + 1) + 3);
    cout << a;
}
        ]]></input></program>
  </solution>

  <exercise label="VARS_a6">
    <statement>
      <p>Write code that assigns <q>apples</q> to the variable oranges, and <q>oranges</q> to the
        variable apples, then swaps their values. Be sure to inclue any necessary headers. YOU MAY
        NOT HARDCODE YOUR SOLUTION. Select the Pseudocode tab for hints for the construction of the
        code.</p>
    </statement>
    <program xml:id="VARS_a6_ps_editor"
             interactive="activecode"
             language="cpp"
             line-numbers="yes">
        <input><![CDATA[
int main () {

    // DO NOT MODIFY ANYTHING BELOW THIS LINE.
    cout << "Your solution had apples = " << apples << "and oranges = " << oranges << "." << endl;
    cout << "The correct solution has apples = apples, and oranges = oranges.";
}
      ]]></input>
      </program>
  </exercise>

  <exercise label="VARS_a7">
    <statement>
      <p>Write code that prints <q>Eat</q>, <q>More</q>, and <q>Chicken</q> on 3 consecutive lines.
        Be sure to inclue any necessary headers.</p>
    </statement>
    <program interactive="activecode"
             language="cpp"
             line-numbers="yes"
             xml:id="VARS_a7q_editor">
      <input>
int main () {

}
        </input>
    </program>
  </exercise>
  <solution> Below is one way to implement the solution. <program xml:id="VARS_a7a_editor"
             language="cpp"
             line-numbers="yes"><input><![CDATA[
#include <iostream>
using namespace std;

int main () {
    cout << "Eat" << endl;
    cout << "More" << endl;
    cout << "Chicken" << endl;
}
        ]]></input></program>
  </solution>

  <exercise label="VARSa9">
    <statement>
      <p>You have about three hours and fifteen minutes of homework to do today. Rather than
        starting it right away, you choose to procrastinate by calculating how many seconds you'll
        be spending on your work. Convert the time to seconds and store the result in <c>seconds</c>. Be
        sure to inclue any necessary headers.</p>
    </statement>
    <program interactive="activecode"
             language="cpp"
             line-numbers="yes"
             xml:id="VARS_a9q_editor">
      <input><![CDATA[
int main () {

    // DO NOT MODIFY ANYTHING BELOW THIS LINE.
    cout << "Your solution had seconds = " << seconds << endl;  cout << "The correct solution has seconds = 11700";
}
        ]]></input>
    </program>
  </exercise>
  <solution> Below is one way to implement the solution. <program xml:id="VARS_a9a_editor"
             language="cpp"
             line-numbers="yes"><input><![CDATA[
#include <iostream>
using namespace std;

int main () {
    int hours = 3;
    int minutes = 15;
    int totalMinutes = minutes + 60 * hours;
    int seconds = totalMinutes * 60;
}
        ]]></input></program>
  </solution>

  <exercise label="VAR_a10">
    <statement>
      <p>Write code that calculates and prints the average of a and b if a = 3.14, and b = 1.59. You
        may only use one line of code. Be sure to inclue any necessary headers. Select the
        Pseudocode tab for hints for the construction of the code.</p>
    </statement>
    <program xml:id="VARS_a10_ps_editor"
             interactive="activecode"
             language="cpp"
             line-numbers="yes">
              <input><![CDATA[
    int main () {
    
       // DO NOT MODIFY ANYTHING BELOW THIS LINE.
       cout << endl;  cout << "Your program should have printed 2.365";
    }
            ]]></input>
            </program>
  </exercise>

  <exercise label="VARS_a10">
    <caption>
      <p>Write code that calculates and prints the average of a and b if a = 3.14, and b = 1.59. You
        may only use one line of code. Be sure to inclue any necessary headers. Select the
        Pseudocode tab for hints for the construction of the code.</p>
    </caption>
    <program xml:id="VARS_a10_ps_editor"
             interactive="activecode"
             language="cpp"
             line-numbers="yes">
      <input><![CDATA[
int main () {

// DO NOT MODIFY ANYTHING BELOW THIS LINE.
cout << endl;  cout << "Your program should have printed 2.365";
}
    ]]></input>
    </program>
  </exercise>
</section>