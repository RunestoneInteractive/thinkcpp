<?xml version="1.0"?>
<section xml:id="chapter2_operators-for-characters">
  <title>Operators for Characters</title>
  <p>Interestingly, the same mathematical operations that work on integers
            also work on characters. For example, observe the following output.</p>
  <exercise label="char_operations_AC_1">
    <statement>
      <p>This program performs character addition.  It works by converting
            the character &#x2018;a' to ASCII, adding 1 to this value, then converting the
            result from ASCIIs back to a character.</p>
    </statement>
    <program xml:id="char_operations_AC_1_editor" interactive="activecode" language="cpp">
      <input><![CDATA[
#include <iostream>
using namespace std;

int main () {
    char letter;
    letter = 'a' + 1;
    cout << letter << endl;
}
        ]]></input>
    </program>
  </exercise>
  <p>Although it is syntactically legal to multiply characters, it is almost never
            useful to do it.</p>
  <p>Earlier I said that you can only assign integer values to integer
            variables and character values to character variables, but that is not
            completely true. In some cases, C++ converts automatically between
            types. For example, the following is legal.</p>
  <exercise label="char_operations_AC_2">
    <statement>
      <p>This program performs automatic type converstion.  It converts &#x2018;a'
            to its ASCII value.</p>
    </statement>
    <program xml:id="char_operations_AC_2_editor" interactive="activecode" language="cpp">
      <input><![CDATA[
#include <iostream>
using namespace std;

int main () {
    int number;
    number = 'a';
    cout << number << endl;
}
        ]]></input>
    </program>
  </exercise>
  <p>The result is 97, which is the number that is used internally by C++ to
            represent the letter 'a'. However, it is generally a good idea to treat
            characters as characters, and integers as integers, and only convert
            from one to the other if there is a good reason.</p>
  <note>
    <p>Characters in C++ hold <term>ASCII</term> values, which range from 0 to 128.  Uppercase
                &#x2018;A' has an ASCII value of 65, lowercase &#x2018;a' has a value of 97, and a space
                has a value of 32.  C++ converts characters to their ASCII values to
                perform automatic type conversion and character arithmetic.</p>
  </note>
  <p>Automatic type conversion is an example of a common problem in designing
            a programming language, which is that there is a conflict between
            <term>formalism</term>, which is the requirement that formal languages should
            have simple rules with few exceptions, and <term>convenience</term>, which is the
            requirement that programming languages be easy to use in practice.</p>
  <p>More often than not, convenience wins, which is usually good for expert
            programmers, who are spared from rigorous but unwieldy formalism, but
            bad for beginning programmers, who are often baffled by the complexity
            of the rules and the number of exceptions. In this book I have tried to
            simplify things by emphasizing the rules and omitting many of the
            exceptions.</p>
  <exercise label="char_operations_1">
    <statement>
      <p>What is the value of letter if <c>letter = 'c' + 3</c>? <var/>  </p>
    </statement>
    <setup>
      <var case="insensitive">
        <condition string="^\s*f\s*$">
          <feedback>
            <p>Correct!</p>
          </feedback>
        </condition>
        <condition string="^\s*.*\s*$">
          <feedback>
            <p>Try again!</p>
          </feedback>
        </condition>
      </var>
    </setup>
  </exercise>
  <exercise label="char_operations_2" numbered="yes" adaptive="yes" indentation="hide" language="python">
    <statement>
      <p>Construct a main function that uses character operations to generate the output &#x2018;r'.</p>
    </statement>
    <blocks>
      <block order="3">
        <cline>int main () {</cline>
      </block>
      <block order="1">
        <cline> char r;</cline>
      </block>
      <block order="5" correct="no">
        <cline> int r; </cline>
      </block>
      <block order="2">
        <cline> r = 'p' + 2;</cline>
      </block>
      <block order="7" correct="no">
        <cline> r = p + 2; </cline>
      </block>
      <block order="6" correct="no">
        <cline> r = 'p' + 3; </cline>
      </block>
      <block order="8">
        <cline> cout &lt;&lt; r;</cline>
      </block>
      <block order="4" correct="no">
        <cline> cout &lt;&lt; "r"; </cline>
      </block>
      <block order="9">
        <cline>}</cline>
      </block>
    </blocks>
  </exercise>
</section>
