<?xml version="1.0"?>
<exercises xml:id="chapter2_multiple-choice-exercises">
  <title>Multiple Choice Exercises</title>
  <p>Answer the following <term>Multiple Choice</term> questions to assess what you have learned in
    this chapter.</p>
  <exercise label="VARS_mc1">
    <statement>
      <p>Take a look at the following program. How many lines of output will be produced?</p>
      <program>int main() {
  int hour = 7;
  int min = 50;
  cout &lt;&lt; "The current time is: " &lt;&lt; endl;
  cout &lt;&lt; hour;
  cout &lt;&lt; ":";  cout &lt;&lt; minute;
  cout &lt;&lt; endl;
  cout &lt;&lt; "I'm going to be late for my 8am!";
}</program>
    </statement>
    <choices>
      <choice>
        <statement id="VARS_mc1_opt_a">
          <p>6</p>
        </statement>
        <feedback>
          There <em>are</em> 6 <c>cout</c> statements, but that doesn't mean there are 6 lines of
            output!
        </feedback>
      </choice>
      <choice>
        <statement id="VARS_mc1_opt_b">
          <p>5</p>
        </statement>
        <feedback>
          There <em>are</em> 5 lines of <c>cout</c> statments, but that doesn't mean there are 5
            lines of output!
        </feedback>
      </choice>
      <choice correct="yes">
        <statement id="VARS_mc1_opt_c">
          <p>3</p>
        </statement>
        <feedback>
          Even though there are 6 <c>cout</c> staments written on 5 lines, there are only 3 lines of
            output in the terminal.
        </feedback>
      </choice>
      <choice>
        <statement id="VARS_mc1_opt_d">
          <p>2</p>
        </statement>
        <feedback>
          There <em>are</em> 2 <c>endl</c> statements. But what happens when you have more output
            after the <c>endl</c>?
        </feedback>
      </choice>
      <choice>
        <statement id="VARS_mc1_opt_e">
          <p>0! There is an error!</p>
        </statement>
        <feedback>
          Everything is syntacticly legal! You can have <c>cout</c> statements on <em>multiple lines
            of code</em> that have <em>one</em> line of output&#x2026; or you can have multiple <c>cout</c>
            statements on <em>one</em> line of code that have <em>multiple</em> lines of output!
        </feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="VARS_mc2">
    <statement>
      <p>What is the type of x?</p>
      <program>
x = "3";
</program>
    </statement>
    <choices>
      <choice>
        <statement id="VARS_mc2_opt_a">
          <p>integer</p>
        </statement>
        <feedback>
          <c>1</c> is an integer.
        </feedback>
      </choice>
      <choice>
        <statement id="VARS_mc2_opt_b">
          <p>double</p>
        </statement>
        <feedback>
          <c>1.0</c> is a double.
        </feedback>
      </choice>
      <choice>
        <statement id="VARS_mc2_opt_c">
          <p>character</p>
        </statement>
        <feedback>
          <c>'1'</c> is a character.
        </feedback>
      </choice>
      <choice correct="yes">
        <statement id="VARS_mc2_opt_d">
          <p>string</p>
        </statement>
        <feedback>
          Anything in double quotes is a string.
        </feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="VARS_mc3">
    <statement>
      <p>What is the value of <c>x</c>?</p>
      <program>
x = 2 + (13 - 5) * 2 + 6 /3;
</program>
    </statement>
    <choices>
      <choice>
        <statement id="VARS_mc3_opt_a">
          <p>7</p>
        </statement>
        <feedback>
          <c>13 - 5</c> is computed first because it is in parentheses.
        </feedback>
      </choice>
      <choice correct="yes">
        <statement id="VARS_mc3_opt_b">
          <p>20</p>
        </statement>
        <feedback>
          C++ follows the order of operations.
        </feedback>
      </choice>
      <choice>
        <statement id="VARS_mc3_opt_c">
          <p>23.333</p>
        </statement>
        <feedback>
          <c>2 + 6</c> is not grouped together like <c>13 - 5</c>.
        </feedback>
      </choice>
      <choice>
        <statement id="VARS_mc3_opt_d">
          <p>34</p>
        </statement>
        <feedback>
          <c>2 + 6 / 3</c> is not computed first.
        </feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="VARS_mc4">
    <statement>
      <p>What is printed when the following code is run?</p>
      <program>int main() {
  int x;
  int y = 2;
  int z = 4;
  x = z;
  z = 6;
  y = x + z;
  cout &lt;&lt; y + z;
}</program>
    </statement>
    <choices>
      <choice>
        <statement id="VARS_mc4_opt_a">
          <p>
            <c>6</c>
          </p>
        </statement>
        <feedback>
          The variables <c>y</c> and <c>z</c> have been re-assigned.
        </feedback>
      </choice>
      <choice>
        <statement id="VARS_mc4_opt_b">
          <p>
            <c>10</c>
          </p>
        </statement>
        <feedback>
          This would be correct if we had written <c>cout &lt;&lt; x + z</c>.
        </feedback>
      </choice>
      <choice correct="yes">
        <statement id="VARS_mc4_opt_c">
          <p>
            <c>16</c>
          </p>
        </statement>
        <feedback>
          Walking through each line of code and keeping track of variables, like you just did, is
            called <term>tracing</term>.
        </feedback>
      </choice>
      <choice>
        <statement id="VARS_mc4_opt_d">
          <p>
            <c>yz</c>
          </p>
        </statement>
        <feedback>
          If y and z were characters <c>'y'</c> and <c>'z'</c>, it would be legal to add them together.
            But the result <c>243</c> might surprise you!
        </feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="VARS_mc5">
    <statement>
      <p><term>Multiple Response</term> Which of the following changes would, by themselves, would
        make the output of the following program <c>34</c>?</p>
      <program>int main() {
  char c;
  int d;
  c = "3";
  d = 4;
  cout &lt;&lt; c; cout &lt;&lt; d;
}</program>
    </statement>
    <choices>
      <choice>
        <statement id="VARS_mc5_opt_a">
          <p>declaring <c>c</c> as an int.</p>
        </statement>
        <feedback>
          This will still result in an error.
        </feedback>
      </choice>
      <choice correct="yes">
        <statement id="VARS_mc5_opt_b">
          <p>declaring <c>c</c> as a string.</p>
        </statement>
        <feedback>
          This clears up the type mismatch on line 4.
        </feedback>
      </choice>
      <choice>
        <statement id="VARS_mc5_opt_c">
          <p>declaring <c>d</c> as a char.</p>
        </statement>
        <feedback>
          Although the code will still run, it won't give correct output.
        </feedback>
      </choice>
      <choice>
        <statement id="VARS_mc5_opt_d">
          <p>Line 4 is replaced with <c>c = 3</c></p>
        </statement>
        <feedback>
          Although the code will still run, it won't give correct output.
        </feedback>
      </choice>
      <choice correct="yes">
        <statement id="VARS_mc5_opt_e">
          <p>Line 4 is replaced with <c>c = '3'</c></p>
        </statement>
        <feedback>
          This clears up the type mismatch on line 4.
        </feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="VARS_mc6">
    <statement>
      <p>What is the output of the following code block?</p>
      <program>int main() {
  string apples;
  apples = "bananas";
  string pineapple;
  string mango = "mango";
  pineapple = apples;
  cout &lt;&lt; "My favorite fruit is ";
  cout &lt;&lt; pineapple &lt;&lt; endl;
  pineapple = mango;
}</program>
    </statement>
    <choices>
      <choice>
        <statement id="VARS_mc6_opt_a">
          <p>
            <c>My favorite fruit is pineapple</c>
          </p>
        </statement>
        <feedback>
          <c>pineapple</c> is the name of the variable, but it's not necessarily the value of that
            variable.
        </feedback>
      </choice>
      <choice correct="yes">
        <statement id="VARS_mc6_opt_b">
          <p>
            <c>My favorite fruit is bananas</c>
          </p>
        </statement>
        <feedback>
          <c>pineapple = apples</c>, and <c>apples = "bananas"</c>.
        </feedback>
      </choice>
      <choice>
        <statement id="VARS_mc6_opt_c">
          <p>
            <c>My favorite fruit is apples</c>
          </p>
        </statement>
        <feedback>
          <c>pineapple = apples</c>, but what does <c>apples</c> equal?
        </feedback>
      </choice>
      <choice>
        <statement id="VARS_mc6_opt_d">
          <p>
            <c>My favorite fruit is mango</c>
          </p>
        </statement>
        <feedback>
          <c>"mango"</c> is the value of the variable <c>pineapple</c> at the end of <c>main</c>, but not at the line
            of the <c>cout</c>.
        </feedback>
      </choice>
      <choice>
        <statement id="VARS_mc6_opt_e">
          <p>Compile error.</p>
        </statement>
        <feedback>
          There are no syntax errors that will cause an issue compiling.
        </feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="VARS_mc7">
    <statement>
      <p>What line does the first error occur in the following program? If there is no error, what
        is the output?</p>
      <program>int main() {
  string Tom = "Tom";
  string friend = "Jerry";
  cout &lt;&lt; tom;
  cout &lt;&lt; "is friends with"; cout &lt;&lt; friend;
}</program>
    </statement>
    <choices>
      <choice>
        <statement id="VARS_mc7_opt_a">
          <p>line 2, a variable cannot have the same name as its value</p>
        </statement>
        <feedback>
          A variable can have any value&#x2026; as long as the types are the same.
        </feedback>
      </choice>
      <choice correct="yes">
        <statement id="VARS_mc7_opt_b">
          <p>line 3, you cannot have a variable named friend</p>
        </statement>
        <feedback>
          <c>friend</c> is a reserved keyword in C++ and can't be used as a variable name. What a
            shame, since Tom and Jerry are the best of friends!
        </feedback>
      </choice>
      <choice>
        <statement id="VARS_mc7_opt_c">
          <p>line 5, you cannot have two statements on the same line</p>
        </statement>
        <feedback>
          You can have as many statements as you want on one line, as long as you terminate each
            one with a semicolon.
        </feedback>
      </choice>
      <choice>
        <statement id="VARS_mc7_opt_d">
          <p>No error, <c>Tom is friends with Jerry</c></p>
        </statement>
        <feedback>
          If the code runs, C++ doesn't automatically add spaces between consecutive strings.
        </feedback>
      </choice>
      <choice>
        <statement id="VARS_mc7_opt_e">
          <p>No error, <c>Tomis friends withJerry</c></p>
        </statement>
        <feedback>
          If the error was corrected, this would be the output. Unfortunately, there is an error
            that prevents this line from executing.
        </feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="VARS_mc8">
    <statement>
      <p>Your math teacher just gave an exam that had all of the students panicking. Four students
        decide to share their scores to see who did the best. At the end of the program's execution,
        who has the highest score on the exam?</p>
      <program>int main() {
  int Regina = 6 * (3 + 2) / 100;
  int Gretchen = (3 + 5) * 6 / 100;
  int Karen =  6 * 3 + 2 / 100;
  int Cady = (3 * 5) * 6 / 100;
}</program>
    </statement>
    <choices>
      <choice>
        <statement id="VARS_mc8_opt_a">
          <p>Regina</p>
        </statement>
        <feedback>
          Using the order of operations we have Regina scoring 30 / 100.
        </feedback>
      </choice>
      <choice>
        <statement id="VARS_mc8_opt_b">
          <p>Gretchen</p>
        </statement>
        <feedback>
          Using the order of operations we have Gretchen scoring 48 / 100.
        </feedback>
      </choice>
      <choice correct="yes">
        <statement id="VARS_mc8_opt_c">
          <p>Karen</p>
        </statement>
        <feedback>
          <c>6 * 3 = 18</c>, and <c>18 + 2 / 100 = 18</c> due to integer division. Believe it or not, due to the order of
            operations and integer division, Karen ended up with the highest <q>score</q> at the end
            of the program's execution.
        </feedback>
      </choice>
      <choice>
        <statement id="VARS_mc8_opt_d">
          <p>Cady</p>
        </statement>
        <feedback>
          Using the order of operations we have Mathlete Cady scoring 90 / 100. this would be the
            highest score&#x2026; if it weren't for integer division.
        </feedback>
      </choice>
      <choice>
        <statement id="VARS_mc8_opt_e">
          <p>They all got 0's.</p>
        </statement>
        <feedback>
          Integer division rounds the quotient down to the nearest integer. Take a closer look at
            what is being divided on each line, because not everyone recieved a zero!
        </feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="VARS_mc9">
    <statement>
      <p>What line does the first error occur in the following program? If there is no error, what
        is the output?</p>
      <program>int main() {
  char r = 'r';
  int x = 3;
  r = r + x;
  cout &lt;&lt; r;
}</program>
    </statement>
    <choices>
      <choice>
        <statement id="VARS_mc9_opt_a">
          <p>line 2, a variable cannot have the same name as its value</p>
        </statement>
        <feedback>
          A variable can have any value&#x2026; as long as the types are the same.
        </feedback>
      </choice>
      <choice>
        <statement id="VARS_mc9_opt_b">
          <p>line 4, you cannot add an integer to a character</p>
        </statement>
        <feedback>
          Actually, C++ supports character operations! This is legal.
        </feedback>
      </choice>
      <choice>
        <statement id="VARS_mc9_opt_c">
          <p>No error, <c>rx</c></p>
        </statement>
        <feedback>
          <c>x</c> is an integer, so what we really have is <c>r = r + 3</c>.
        </feedback>
      </choice>
      <choice>
        <statement id="VARS_mc9_opt_d">
          <p>No error, <c>r</c></p>
        </statement>
        <feedback>
          <c>'r'</c> isn't necessarily the value of <c>r</c>. Take a look at line 4.
        </feedback>
      </choice>
      <choice correct="yes">
        <statement id="VARS_mc9_opt_e">
          <p>No error, <c>u</c></p>
        </statement>
        <feedback>
          &#x2018;u' is three letters after &#x2018;r', so on line 4, the value of <c>u</c>
            becomes the value of <c>r</c>.
        </feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="VARS_mc10">
    <statement>
      <p>Suppose you want to find the volume of a cone. For reference, the formula is <c>V = 1/3 pi * r^2 * h</c>. For
        the sake of this question, we will use <c>pi = 3.14</c>. What is wrong with the following code?</p>
      <program>double volume(r, h) {
  return 1/3 * 3.14 * r * r * h;
}</program>
    </statement>
    <choices>
      <choice correct="yes">
        <statement id="VARS_mc10_opt_a">
          <p>semantic error</p>
        </statement>
        <feedback>
          With integer division, <c>1 / 3</c> becomes 0. Multiplying 0 by the rest of the expression
            will always return 0, which is not what you want your program to do!
        </feedback>
      </choice>
      <choice>
        <statement id="VARS_mc10_opt_b">
          <p>syntax error</p>
        </statement>
        <feedback>
          There is nothing wrong with the structure of your program.
        </feedback>
      </choice>
      <choice>
        <statement id="VARS_mc10_opt_c">
          <p>run-time error</p>
        </statement>
        <feedback>
          There are no errors that will surface at run-time.
        </feedback>
      </choice>
      <choice>
        <statement id="VARS_mc10_opt_d">
          <p>You can't calculate and return on the same line!</p>
        </statement>
        <feedback>
          You actually can, this is called composition.
        </feedback>
      </choice>
      <choice>
        <statement id="VARS_mc10_opt_e">
          <p>Nothing! There is not an error.</p>
        </statement>
        <feedback>
          This formula will return a volume, but is it correct?
        </feedback>
      </choice>
    </choices>
  </exercise>
</exercises>