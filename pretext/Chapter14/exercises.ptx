<?xml version="1.0"?>
<exercises xml:id="chapter14_multiple-choice-exercises">
  <title>Multiple Choice Exercises</title>
  <exercise label="mce_14_1">
    <statement>
      <p>What is one use of data encapsulation?</p>
    </statement>
    <choices>
      <choice>
        <statement id="mce_14_1_opt_a">
          <p>To wrap up a sequence of code in a function.</p>
        </statement>
        <feedback>
          This is one use of functional encapsulation, not data encapsulation.
        </feedback>
      </choice>
      <choice correct="yes">
        <statement id="mce_14_1_opt_b">
          <p>To hide implementation details from users or programmers that don't need to know them.</p>
        </statement>
        <feedback>
          Data encapsulation is the separation of the implementation of data from the interface
            of a structure.
        </feedback>
      </choice>
      <choice>
        <statement id="mce_14_1_opt_c">
          <p>To keep all data in a container like a vector.</p>
        </statement>
        <feedback>
          This is not related to encapsulation.
        </feedback>
      </choice>
      <choice>
        <statement id="mce_14_1_opt_d">
          <p>To make all data public and accessible to everyone.</p>
        </statement>
        <feedback>
          Data encapsulation is based on the idea that each structure should prevent
            unrestricted access to internal representation.
        </feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="mce_14_2">
    <statement>
      <p>Which of the following are accessor functions?</p>
      <program line-numbers="yes">
        <code><![CDATA[
struct Student {
private:
  int id;
public:
  string name;
  int year;

  int getID() { return id; }
  int setID(int i) { id = i; }
  void printInfo() { cout << "Student: " << name << ", " << year; }
};
]]></code>
      </program>
    </statement>
    <choices>
      <choice>
        <statement id="mce_14_2_opt_a">
          <p>
            <c>Student()</c>
          </p>
        </statement>
        <feedback>
          This is the <c>Student</c> constructor.
        </feedback>
      </choice>
      <choice correct="yes">
        <statement id="mce_14_2_opt_b">
          <p>
            <c>getID()</c>
          </p>
        </statement>
        <feedback>
          This is a <q>getter</q> function, which is an accessor function since it accesses and
            returns a private member variable.
        </feedback>
      </choice>
      <choice correct="yes">
        <statement id="mce_14_2_opt_c">
          <p>
            <c>setID()</c>
          </p>
        </statement>
        <feedback>
          This is a <q>setter</q> function, which is an accessor function since it accesses and
            modifies a private member variable.
        </feedback>
      </choice>
      <choice>
        <statement id="mce_14_2_opt_d">
          <p>
            <c>printInfo()</c>
          </p>
        </statement>
        <feedback>
          This function does not access a private member variable.
        </feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="mce_14_3">
    <statement>
      <p>Which of the following are true?</p>
    </statement>
    <choices>
      <choice>
        <statement id="mce_14_3_opt_a">
          <p>By default, <c>struct</c> member variables are private.</p>
        </statement>
        <feedback>
          By default, <c>struct</c> member variables are public. This is the main difference between a <c>class</c>
            and a <c>struct</c>.
        </feedback>
      </choice>
      <choice correct="yes">
        <statement id="mce_14_3_opt_b">
          <p>By default, <c>class</c> member variables are private.</p>
        </statement>
        <feedback>
          This is different from a <c>struct</c>, whose member variables default to be public.
        </feedback>
      </choice>
      <choice correct="yes">
        <statement id="mce_14_3_opt_c">
          <p>Private member variables can be accessed within the class.</p>
        </statement>
        <feedback>
          Private member variables are private to things outside of the class.
        </feedback>
      </choice>
      <choice correct="yes">
        <statement id="mce_14_3_opt_d">
          <p>Public member variables can be accessed within the class.</p>
        </statement>
        <feedback>
          Public member variables can be accessed anywhere, including within the class.
        </feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="mce_14_4">
    <statement>
      <p>What should replace the question marks in the code below? Use accessor functions.</p>
      <program line-numbers="yes">
        <code>
class rightTriangle {
  int base;
  int height;

  public:
    int getBase() { return base; }
    int getHeight() { return height; }
    double calculateHypotenuse() {
      ???
    }
};
</code>
      </program>
    </statement>
    <choices>
      <choice correct="yes">
        <statement id="mce_14_4_opt_a">
          <p>
            <c>return sqrt(pow(getBase, 2) + pow(getHeight, 2));</c>
          </p>
        </statement>
        <feedback>
          We use the Pythagorean Theorem and <c>getBase</c> and <c>getHeight</c> to calculate and return the
            hypotenuse.
        </feedback>
      </choice>
      <choice>
        <statement id="mce_14_4_opt_b">
          <p>
            <c>return pow(getBase, 2) + pow(getHeight, 2);</c>
          </p>
        </statement>
        <feedback>
          Use the Pythagorean Theorem!
        </feedback>
      </choice>
      <choice>
        <statement id="mce_14_4_opt_c">
          <p>
            <c>return sqrt(pow(base, 2) + pow(height, 2));</c>
          </p>
        </statement>
        <feedback>
          Although this would work, we want to use accessor functions.
        </feedback>
      </choice>
      <choice>
        <statement id="mce_14_4_opt_d">
          <p>
            <c><![CDATA[cout << sqrt(pow(getBase, 2) + pow(getHeight, 2));]]></c>
          </p>
        </statement>
        <feedback>
          Take a look at the return type of <c>calculateHypotenuse</c>.
        </feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="mce_14_5">
    <statement>
      <p>What is wrong with the code below?</p>
      <program line-numbers="yes">
        <code><![CDATA[
class Plane {
  int flightNumber;
  string model;
  string origin;
  string destination;

  public:
    void printInfo() {
      cout << "Flight " << flightNumber << " (" << model
           << ") from " << origin << " to " << destination << endl;
    }
};

int main() {
  Plane p;
  p.flightNumber = 1846;
  p.model = "Boeing 787";
  p.origin = "Los Angeles";
  p.destination = "Detroit";
  p.printInfo();
}
]]></code>
      </program>
    </statement>
    <choices>
      <choice>
        <statement id="mce_14_5_opt_a">
          <p>The <c>Plane</c> class is missing the keyword <c>private:</c>.</p>
        </statement>
        <feedback>
          By default, <c>class</c> member variables are private, so we don't need to explicitly write <c>private:</c>
            .
        </feedback>
      </choice>
      <choice>
        <statement id="mce_14_5_opt_b">
          <p><c>printInfo</c> cannot access <c>Plane</c>'s private member variables.</p>
        </statement>
        <feedback>
          The private member variables of <c>Plane</c> are only inaccessible to those outside of the
            class.
        </feedback>
      </choice>
      <choice correct="yes">
        <statement id="mce_14_5_opt_c">
          <p>We cannot assign the private member variables of <c>p</c> in <c>main</c>.</p>
        </statement>
        <feedback>
          We are trying to access the private member variables of a <c>Plane</c> object outside of the <c>Plane</c>
            class.
        </feedback>
      </choice>
      <choice>
        <statement id="mce_14_5_opt_d">
          <p>We cannot call <c>printInfo</c> in <c>main</c>.</p>
        </statement>
        <feedback>
          <c>printInfo</c> is a public member function, so we are allowed to call it in <c>main</c>.
        </feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="mce_14_6">
    <statement>
      <p>What is the output of the code below?</p>
      <program line-numbers="yes">
        <code><![CDATA[
class Temp {
private:
  double fahrenheit;
  double celsius;
  bool is_fahrenheit;
  bool is_celsius;

public:
  double getFahrenheit() { return fahrenheit; }
  double getCelsius() { return celsius; }
  void setFahrenheit(double f) { fahrenheit = f; is_fahrenheit = true; is_celsius = false; }
  void setCelsius(double c) { celsius = c; is_celsius = true; is_fahrenheit = false; }
  void printTemp() {
    if (is_fahrenheit) {
      cout << "It is " << getFahrenheit() << " degrees Fahrenheit" << endl;
    }
    else {
      cout << "It is " << getCelsius() << " degrees Celsius" << endl;
    }
  }
};

int main() {
  Temp t;
  t.setFahrenheit (125);
  t.setCelsius (30);
  t.printTemp();
}
]]></code>
      </program>
    </statement>
    <choices>
      <choice>
        <statement id="mce_14_6_opt_a">
          <p>It is 125 degrees Fahrenheit</p>
        </statement>
        <feedback>
          Since we called <c>setCelsius</c> last, <c>is_celsius</c> is <c>true</c> and <c>is_fahrenheit</c> is false.
        </feedback>
      </choice>
      <choice>
        <statement id="mce_14_6_opt_b">
          <p>It is 30 degrees Fahrenheit</p>
        </statement>
        <feedback>
          Since we called <c>setCelsius</c> last, <c>is_celsius</c> is <c>true</c> and <c>is_fahrenheit</c> is false.
        </feedback>
      </choice>
      <choice>
        <statement id="mce_14_6_opt_c">
          <p>It is 125 degrees Celsius</p>
        </statement>
        <feedback>
          What was the value that we set <c>celsius</c> equal to?
        </feedback>
      </choice>
      <choice correct="yes">
        <statement id="mce_14_6_opt_d">
          <p>It is 30 degrees Celsius</p>
        </statement>
        <feedback>
          Since we called <c>setCelsius</c> last, we print out 30 degrees Celsius.
        </feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="mce_14_7">
    <statement>
      <p>Which of the following are true about invariants?</p>
    </statement>
    <choices>
      <choice correct="yes">
        <statement id="mce_14_7_opt_a">
          <p>Data encapsulation helps enforce invariants by preventing unrestricted access to
            private member variables.</p>
        </statement>
        <feedback>
          By limiting access to private member variables, data encapsulation can control what
            values these variables can take on.
        </feedback>
      </choice>
      <choice>
        <statement id="mce_14_7_opt_b">
          <p>If an invariant is true at the start of a function, it can be false at the end.</p>
        </statement>
        <feedback>
          If an invariant is true at the start of a function, it must also be true at the end.
        </feedback>
      </choice>
      <choice>
        <statement id="mce_14_7_opt_c">
          <p>An invariant cannot be false in the middle of a function, even if it is true at the
            start and the end.</p>
        </statement>
        <feedback>
          An invariant can be false in the middle of a function, and it is sometimes unavoidable.
        </feedback>
      </choice>
      <choice correct="yes">
        <statement id="mce_14_7_opt_d">
          <p>Maintaining invariants can reduce the number of bugs in a program.</p>
        </statement>
        <feedback>
          By maintaining invariants, you can guarantee that all values are what they should be.
        </feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="mce_14_8">
    <statement>
      <p>Take a look at the class definition of <c>Date</c>. What are some invariants we must maintain?</p>
      <program line-numbers="yes">
        <code>
class Date {
private:
  int day;
  int month;
  int year;
  bool is_birthday;
  string message;

public:
  Date(int hour, int d, int m, int y, bool b, string m) {
    day = d;
    month = m;
    year = y;
    is_birthday = b;
    message = m;
  }
};
</code>
      </program>
    </statement>
    <choices>
      <choice correct="yes">
        <statement id="mce_14_8_opt_a">
          <p><c>day</c> must be between 1 and 31.</p>
        </statement>
        <feedback>
          There is a maximum of 31 possible days in a month.
        </feedback>
      </choice>
      <choice correct="yes">
        <statement id="mce_14_8_opt_b">
          <p><c>month</c> must be between 1 and 12.</p>
        </statement>
        <feedback>
          There are 12 months in a year.
        </feedback>
      </choice>
      <choice>
        <statement id="mce_14_8_opt_c">
          <p><c>is_birthday</c> must be <c>true</c> or <c>false</c>.</p>
        </statement>
        <feedback>
          This isn't an invariant since <c>is_birthday</c> being a <c>bool</c> isn't really a condition.
        </feedback>
      </choice>
      <choice>
        <statement id="mce_14_8_opt_d">
          <p><c>year</c> must be greater than 2000.</p>
        </statement>
        <feedback>
          <c>year</c> can be less than 2000, so this isn't a correct invariant to maintain.
        </feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="mce_14_9">
    <statement>
      <p>Take a look at the function below. What are its preconditions and postconditions?</p>
      <program line-numbers="yes">
        <code>
int calculateRectangleArea(int length, int width) {
  return length * width;
}
</code>
      </program>
    </statement>
    <choices>
      <choice correct="yes">
        <statement id="mce_14_9_opt_a">
          <p>Precondition: <c>length</c> and <c>width</c> must both be positive.</p>
        </statement>
        <feedback>
          A rectangle can't have negative dimensions, or dimensions of 0.
        </feedback>
      </choice>
      <choice>
        <statement id="mce_14_9_opt_b">
          <p>Precondition: <c>length</c> must be greater than <c>width</c>.</p>
        </statement>
        <feedback>
          A rectangle can be wider than it is long.
        </feedback>
      </choice>
      <choice correct="yes">
        <statement id="mce_14_9_opt_c">
          <p>Postcondition: <c>calculateRectangleArea</c> must return a positive number.</p>
        </statement>
        <feedback>
          Since <c>length</c> and <c>width</c> must both be positive, their product muast also be positive.
        </feedback>
      </choice>
      <choice>
        <statement id="mce_14_9_opt_d">
          <p>Postcondition: <c>calculateRectangleArea</c> must return a nonnegative number.</p>
        </statement>
        <feedback>
          <c>calculateRectangleArea</c> cannot return 0, which is a nonnegative number but not a valid area.
        </feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="mce_14_10">
    <statement>
      <p>What are private functions and what do they do?</p>
    </statement>
    <choices>
      <choice>
        <statement id="mce_14_10_opt_a">
          <p>Functions that return the type <c>private</c>.</p>
        </statement>
        <feedback>
          There is no return type of <c>private</c>.
        </feedback>
      </choice>
      <choice>
        <statement id="mce_14_10_opt_b">
          <p>Functions that are used to retrieve and modify private member variables.</p>
        </statement>
        <feedback>
          These are called accessor functions, not private functions.
        </feedback>
      </choice>
      <choice>
        <statement id="mce_14_10_opt_c">
          <p>Functions written outside of a class that accesses a class's private member variables.</p>
        </statement>
        <feedback>
          No function outside of a class can access that class's private member variables.
        </feedback>
      </choice>
      <choice correct="yes">
        <statement id="mce_14_10_opt_d">
          <p>Functions that are declared private which cannot be invoked by client programs.</p>
        </statement>
        <feedback>
          We would make functions private if we wanted to restrict their usage outside of the
            class.
        </feedback>
      </choice>
    </choices>
  </exercise>
</exercises>