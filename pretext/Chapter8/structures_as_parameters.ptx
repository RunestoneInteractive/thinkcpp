<?xml version="1.0"?>
<section xml:id="chapter8_structures-as-parameters">
  <title>Structures as parameters</title>
  <p>You can pass structures as parameters in the usual way. For example,</p>
  <pre>void printPoint (Point p) {
  cout &lt;&lt; "(" &lt;&lt; p.x &lt;&lt; ", " &lt;&lt; p.y &lt;&lt; ")" &lt;&lt; endl;
}</pre>
  <p><c>printPoint</c> takes a point as an argument and outputs it in the
            standard format. If you call <c>printPoint (blank)</c>, it will output
            <c>(3, 4)</c>.</p>
  <listing label="structures_parameters_AC_1">
    <caption>
      <p>The active code below uses the <c>printPoint</c> function. Run the code to
            see the output!</p>
    </caption>
    <program xml:id="structures_parameters_AC_1_editor" interactive="activecode" language="cpp" line-numbers="yes">
      <input><![CDATA[
#include <iostream>
using namespace std;

struct Point {
    double x, y;
};

void printPoint (Point p) {
    cout << "(" << p.x << ", " << p.y << ")" << endl;
}

int main() {
    Point blank = { 3.0, 4.0 };
    printPoint (blank);
}
        ]]></input>
    </program>
  </listing>
  <p>As a second example, we can rewrite the <c>distance</c> function from
            <number_reference internal="True" refuri="../Chapter5/programdevelopment#distance" title="Section %s"><inline classes="std std-numref">Section 5.2</inline></number_reference> so that it takes two <c>Point</c>s as
            parameters instead of four <c>double</c>s.</p>
  <pre>double distance (Point p1, Point p2) {
  double dx = p2.x - p1.x;
  double dy = p2.y - p1.y;
  return sqrt (dx*dx + dy*dy);
}</pre>
  <listing label="structures_parameters_AC_2">
    <caption>
      <p>The active code below uses the updated version of the <c>distance</c> function.
            Feel free to modify the code!</p>
    </caption>
    <program xml:id="structures_parameters_AC_2_editor" interactive="activecode" language="cpp" line-numbers="yes">
      <input><![CDATA[
#include <iostream>
#include <cmath>
using namespace std;

struct Point {
    double x, y;
};

double distance (Point p1, Point p2) {
    double dx = p2.x - p1.x;
    double dy = p2.y - p1.y;
    return sqrt (dx*dx + dy*dy);
}

int main() {
    Point origin = { 0.0, 0.0 };
    Point point = { 3.0, 4.0 };
    cout << "The distance from the point to the origin is " << distance (origin, point) << endl;
}
        ]]></input>
    </program>
  </listing>
  <listing label="structures_parameters_1">
    <caption>
      <p>What will print?</p>
      <program language="cpp" line-numbers="yes">
        <input><![CDATA[
struct Coordinate {
  int x, y;
};

void printOppositeCoordinate (Coordinate p) {
  cout << "(" << -p.y << ", " << -p.x << ")" << endl;
}

int main() {
  Coordinate coord = { 2, 7 };
  printOppositeCoordinate (coord);
}
]]></input>
      </program>
    </caption>
    <choices>
      <choice>
        <statement id="structures_parameters_1_opt_a">
          <p>
            <c>(-2, -7)</c>
          </p>
        </caption>
        <feedback id="structures_parameters_1_opt_a">
          <p>Take a close look at the printOppositeCoordinate function.</p>
        </feedback>
      </choice>
      <choice>
        <statement id="structures_parameters_1_opt_b">
          <p>
            <c>(2.0, 7.0)</c>
          </p>
        </caption>
        <feedback id="structures_parameters_1_opt_b">
          <p>Take a close look at the printOppositeCoordinate function.</p>
        </feedback>
      </choice>
      <choice correct="yes">
        <statement id="structures_parameters_1_opt_c">
          <p>
            <c>(-7, -2)</c>
          </p>
        </caption>
        <feedback id="structures_parameters_1_opt_c">
          <p>Yes, this is the correct output.</p>
        </feedback>
      </choice>
      <choice>
        <statement id="structures_parameters_1_opt_d">
          <p>
            <c>(-7.0, -2.0)</c>
          </p>
        </caption>
        <feedback id="structures_parameters_1_opt_d">
          <p>Take a close look at the Coordinate struct.</p>
        </feedback>
      </choice>
    </choices>
  </listing>
  <listing label="structures_parameters_2" numbered="yes" adaptive="yes" indentation="hide" language="python">
    <caption>
      <p>Construct a function that takes in three Point structures and prints the average of the x coordinates and the average of the y coordinates as a coordinate. Find the x average before the y average.</p>
    </caption>
    <blocks>
      <block order="4">
        <cline>void printAveragePoint(Point p1, Point p2, Point p3) {</cline>
      </block>
      <block order="3">
        <cline> double avgX = (p1.x + p2.x + p3.x)/3;</cline>
      </block>
      <block order="2">
        <cline> double avgY = (p1.y + p2.y + p3.y)/3;</cline>
      </block>
      <block order="1" correct="no">
        <cline> double avgY = (y.p1 + y.p2 + y.p3)/3; </cline>
      </block>
      <block order="7">
        <cline><![CDATA[ cout << "(" << avgX << "," << avgY << ")";]]></cline>
      </block>
      <block order="5" correct="no">
        <cline><![CDATA[ cout << "(" << "avgX" << "," << "avgY" << ")"; ]]></cline>
      </block>
      <block order="6">
        <cline>}</cline>
      </block>
    </blocks>
  </listing>
</section>
