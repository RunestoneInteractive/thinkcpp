<?xml version="1.0"?>
<exercises xml:id="chapter8_multiple-choice-exercises">
  <title>Multiple Choice Exercises</title>
  <exercise label="mce_8_1">
    <statement>
      <p>Which of the following are compound values?</p>
      <program language="cpp"
               line-numbers="yes">
        <code>
struct Student {
  string firstName, lastName;
  int year;
  double gpa;
};

struct Professor {
  string firstName, lastName;
  string department;
  int class;
};

int main() {
  Student x = { "John", "Doe", 2, 3.46 };
  Student y = { "Jane", "Doe", 3, 3.68 };
  Professor z = { "Richard", "Roe", "Computer Science", 101 };
  string college = "University of College";
  int studentPop = 3400;
  double avgGPA = 3.2;
}
</code>
      </program>
    </statement>
    <choices>
      <choice correct="yes">
        <statement>
          <p>
            <c>x</c>
          </p>
        </statement>
        <feedback><p>
          <c>x</c> is a <c>Student</c> which is a <c>struct</c>.
        </p></feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>
            <c>y</c>
          </p>
        </statement>
        <feedback><p>
          <c>y</c> is a <c>Student</c> which is a <c>struct</c>.
        </p></feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>
            <c>z</c>
          </p>
        </statement>
        <feedback><p>
          <c>z</c> is a <c>Professor</c> which is a <c>struct</c>.
        </p></feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>
            <c>college</c>
          </p>
        </statement>
        <feedback><p>
          <c>college</c> is a <c>string</c> which is made up of characters.
        </p></feedback>
      </choice>
      <choice>
        <statement>
          <p>
            <c>studentPop</c>
          </p>
        </statement>
        <feedback><p>
          An <c>int</c> is not a compound value.
        </p></feedback>
      </choice>
      <choice>
        <statement>
          <p>
            <c>avgGPA</c>
          </p>
        </statement>
        <feedback><p>
          A <c>double</c> is not a compound value.
        </p></feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="mce_8_2">
    <statement>
      <p>What is wrong with the following <c>struct</c> definition?</p>
      <program language="cpp"
               line-numbers="yes">
        <code>
struct Chicken {
  string name;
  int numLegs;
  int eggs;
}
</code>
      </program>
    </statement>
    <choices>
      <choice>
        <statement>
          <p>The word <q>struct</q> needs to be capitalized.</p>
        </statement>
        <feedback><p>
          <q>struct</q> shouldn't be capitalized in a <c>struct</c> definition.
        </p></feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>There needs to be a semicolon after the end curly brace.</p>
        </statement>
        <feedback><p>
          It is a common error to forgot the semicolon at the end of <c>struct</c> definitions.
        </p></feedback>
      </choice>
      <choice>
        <statement>
          <p>A <c>struct</c> cannot have two instance variables of both <c>string</c> and <c>int</c></p>
        </statement>
        <feedback><p>
          Instance variables of different types in a single struct is fine.
        </p></feedback>
      </choice>
      <choice>
        <statement>
          <p>There is nothing wrong with the <c>struct</c> definition.</p>
        </statement>
        <feedback><p>
          There is an error with the definition. Can you find it?
        </p></feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="mce_8_3">
    <statement>
      <p>How do we assign the value of 4 to the instance variable <c>numLegs</c> of the <c>Dog</c> object?</p>
      <program language="cpp"
               line-numbers="yes">
        <code>
struct Dog {
  string name;
  int numLegs;
  bool isPanting;
};

int main() {
  Dog doug = { "Doug", 0, true };
}
</code>
      </program>
    </statement>
    <choices>
      <choice>
        <statement>
          <p>
            <c>Dog.numLegs = 4;</c>
          </p>
        </statement>
        <feedback><p>
          The <c>Dog</c> object is <c>doug</c>. We can use the dot notation on an object.
        </p></feedback>
      </choice>
      <choice>
        <statement>
          <p>
            <c>doug.legs = 4;</c>
          </p>
        </statement>
        <feedback><p>
          Check the name of the instance variable in the <c>struct</c> definition.
        </p></feedback>
      </choice>
      <choice>
        <statement>
          <p>
            <c>doug[legs] = 4;</c>
          </p>
        </statement>
        <feedback><p>
          We can assign values to the instance variables of a <c>struct</c> using dot notation.
        </p></feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>
            <c>doug.numLegs = 4;</c>
          </p>
        </statement>
        <feedback><p>
          Using dot notation on <c>doug</c>, we can set the value of <c>numLegs</c> to 4.
        </p></feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="mce_8_4">
    <statement>
      <p>What is the output of the code below?</p>
      <program language="cpp"
               line-numbers="yes">
        <code><![CDATA[
struct Cube {
  int edgeLength;
  int volume;
  int mass;
};

int main() {
  Cube c;
  c.edgeLength = 4;
  c.volume = 64;
  c.mass = 128;
  cout << c.edgeLength << ", " << c.mass << ", " << c.volume << ", ";
  int density = c.mass / c.volume;
  cout << density;
}
]]></code>
      </program>
    </statement>
    <choices>
      <choice>
        <statement>
          <p>
            <c>4, 64, 128, 2</c>
          </p>
        </statement>
        <feedback><p>
          Check the ordering of the output statements.
        </p></feedback>
      </choice>
      <choice>
        <statement>
          <p>
            <c>4, 128, 64</c>
          </p>
        </statement>
        <feedback><p>
          Take a closer look at the output statements.
        </p></feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>
            <c>4, 128, 64, 2</c>
          </p>
        </statement>
        <feedback><p>
          The code outputs all instance variables and the density in the proper order.
        </p></feedback>
      </choice>
      <choice>
        <statement>
          <p>
            <c>edgeLength, volume, mass, density</c>
          </p>
        </statement>
        <feedback><p>
          Dot notation accesses the values of the instance variables, not the names.
        </p></feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="mce_8_5">
    <statement>
      <p>What is the output of the code below?</p>
      <program language="cpp"
               line-numbers="yes">
        <code><![CDATA[
struct Cube {
  int edgeLength;
  int volume;
  int mass;
};

int calculateDensity(Cube c) {
  return c.mass / c.volume;
}

int main() {
  Cube c;
  c = (Cube) { 2, 8, 4 };
  int density = calculateDensity(c);
  cout << density;
}
]]></code>
      </program>
    </statement>
    <choices>
      <choice correct="yes">
        <statement>
          <p>0</p>
        </statement>
        <feedback><p>
          Because of integer division, <c>density</c> is 0 and thus the output is 0.
        </p></feedback>
      </choice>
      <choice>
        <statement>
          <p>2</p>
        </statement>
        <feedback><p>
          Density is mass divided by volume.
        </p></feedback>
      </choice>
      <choice>
        <statement>
          <p>0.5</p>
        </statement>
        <feedback><p>
          Take a closer look at what kind of division we are doing.
        </p></feedback>
      </choice>
      <choice>
        <statement>
          <p>1</p>
        </statement>
        <feedback><p>
          Integer division truncates the extra digits.
        </p></feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="mce_8_6">
    <statement>
      <p>What is the value of <c>s.coffeeCupFull</c> when the code is done running?</p>
      <program language="cpp"
               line-numbers="yes">
        <code>
struct Student {
  string name;
  bool isSleepy;
  bool coffeeCupFull;
};

void pourCoffee(Student s) {
  s.coffeeCupFull = true;
}

int main() {
  Student s = { "Thor Odinson", true, false };
  if (s.isSleepy) {
    pourCoffee (s);
  }
}
</code>
      </program>
    </statement>
    <choices>
      <choice>
        <statement>
          <p>true</p>
        </statement>
        <feedback><p>
          C++ outputs boolean values as either a 0 or 1.
        </p></feedback>
      </choice>
      <choice>
        <statement>
          <p>false</p>
        </statement>
        <feedback><p>
          C++ outputs boolean values as either a 0 or 1.
        </p></feedback>
      </choice>
      <choice>
        <statement>
          <p>1</p>
        </statement>
        <feedback><p>
          Take a closer look at the function definition of <c>pourCoffee</c>.
        </p></feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>0</p>
        </statement>
        <feedback><p>
          Since we pass a <c>Student</c> object by value to <c>pourCoffee</c>, the function makes a copy of the
            object and does not modify the original. If you wanted the original value to change,
            pass it by reference!
        </p></feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="mce_8_7">
    <statement>
      <p>What is the value of <c>r.batteryLevelPercentage</c> when the code is done running?</p>
      <program language="cpp"
               line-numbers="yes">
        <code>
struct Robot {
  string name;
  int batteryLevelPercentage;
  bool isFullyCharged;
};

void chargeRobot(Robot&amp; r) {
  if (r.batteryLevelPercentage + 50 &gt; 100) {
    r.batteryLevelPercentage = 100;
    r.isFullyCharged = true;
  }
  else {
    r.batteryLevelPercentage = r.batteryLevelPercentage + 50;
  }
}

int main() {
  Robot r = { "Rob", 60, false };
  chargeRobot(r);
}
</code>
      </program>
    </statement>
    <choices>
      <choice correct="yes">
        <statement>
          <p>100</p>
        </statement>
        <feedback><p>
          The <c>Robot</c> object is passed by reference to <c>chargeRobot</c>, which caps the <c>batteryLevelPercentage</c> at 100.
        </p></feedback>
      </choice>
      <choice>
        <statement>
          <p>110</p>
        </statement>
        <feedback><p>
          Take a closer look at the <c>chargeRobot</c> function.
        </p></feedback>
      </choice>
      <choice>
        <statement>
          <p>60</p>
        </statement>
        <feedback><p>
          Is the <c>Robot</c> object passed by value or by reference to <c>chargeRobot</c>?
        </p></feedback>
      </choice>
      <choice>
        <statement>
          <p>1</p>
        </statement>
        <feedback><p>
          That is the final value of <c>r.isFullyCharged</c>.
        </p></feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="mce_8_8">
    <statement>
      <p>What is the output of the code below?</p>
      <program language="cpp"
               line-numbers="yes">
        <code><![CDATA[
void foo (int& x, int y) {
  x = x + 4;
  y = 2 * x + 3 * y;
}

void bar(int x, int y) {
  y = 2 * x;
  x = x - 1;
  foo (x, x);
}

void func(int &x, int& y) {
  x = x + 3;
  bar (y, x);
}

int main() {
  int x = 4;
  int y = 7;
  func (y, x);
  cout << x << ", " << y;
}
]]></code>
      </program>
    </statement>
    <choices>
      <choice>
        <statement>
          <p>4, 7</p>
        </statement>
        <feedback><p>
          Take a closer look at <c>func</c> and its parameters. Are they passed by value, passed by
            reference, or both?
        </p></feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>4, 10</p>
        </statement>
        <feedback><p>
          Since <c>bar</c> doesn't pass either parameter by reference, neither <c>bar</c> nor <c>foo</c>
            affect the values of <c>x</c> and <c>y</c>.
        </p></feedback>
      </choice>
      <choice>
        <statement>
          <p>7, 7</p>
        </statement>
        <feedback><p>
          Check the order of the arguments passed into <c>func</c>.
        </p></feedback>
      </choice>
      <choice>
        <statement>
          <p>35, 8</p>
        </statement>
        <feedback><p>
          Take a closer look at the three functions. Are they all passed by reference?
        </p></feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="mce_8_9">
    <statement>
      <p>If the user inputted the string <q>R2-D2</q>, what is the output of the code below?</p>
      <program language="cpp"
               line-numbers="yes">
        <code><![CDATA[
int main() {
  string name;
  cin >> name;
  cout << "Hello, " << name << "!";
}
]]></code>
      </program>
    </statement>
    <choices>
      <choice>
        <statement>
          <p>R2-D2</p>
        </statement>
        <feedback><p>
          Take another look at the <c>cout</c> statement.
        </p></feedback>
      </choice>
      <choice>
        <statement>
          <p>Hello name!</p>
        </statement>
        <feedback><p>
          <c>name</c> is not in quotes so the value stored in <c>name</c> will be printed.
        </p></feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>Hello, R2-D2!</p>
        </statement>
        <feedback><p>
          <q>R2-D2</q> is stored in <c>name</c> and is then outputted in the <c>cout</c> statement.
        </p></feedback>
      </choice>
      <choice>
        <statement>
          <p>name</p>
        </statement>
        <feedback><p>
          <c>cin</c> reads input from the user.
        </p></feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="mce_8_10">
    <statement>
      <p>If the user inputted the string <q>C-3PO</q>, what is the output of the code below?</p>
      <program language="cpp"
               line-numbers="yes">
        <code><![CDATA[
int main() {
  char name;
  cin >> name;
  cout << "Hello, " << name << "!";
}
]]></code>
      </program>
    </statement>
    <choices>
      <choice>
        <statement>
          <p>Hello, CPO!</p>
        </statement>
        <feedback><p>
          <c>cin</c> reads the first <c>char</c> in from user input.
        </p></feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>Hello, C!</p>
        </statement>
        <feedback><p>
          Since &#x2018;C' is the first <c>char</c> in the input, this is the correct output. The
            program will ignore everything that comes after the first <c>char</c>.
        </p></feedback>
      </choice>
      <choice>
        <statement>
          <p>Hello, C-3PO!</p>
        </statement>
        <feedback><p>
          Check the data type of <c>name</c>.
        </p></feedback>
      </choice>
      <choice>
        <statement>
          <p>Error, we cannot read a character from user input.</p>
        </statement>
        <feedback><p>
          We can read characters from user input.
        </p></feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="mce_8_11">
    <statement>
      <p>If the user inputted the string <q>Darth Vader</q>, what is the output of the code below?</p>
      <program language="cpp"
               line-numbers="yes">
        <code><![CDATA[
int main() {
  string quote;
  getline(cin, quote);
  cout << quote << " is the epitome of Star Wars!";
}
]]></code>
      </program>
    </statement>
    <choices>
      <choice>
        <statement>
          <p>
            <c>quote is the epitome of Star Wars!</c>
          </p>
        </statement>
        <feedback><p>
          <c>quote</c> is not in quotes so the value stored in <c>quote</c> will be printed.
        </p></feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>
            <c>Darth Vader is the epitome of Star Wars!</c>
          </p>
        </statement>
        <feedback><p>
          getline reads the entire line until the user hits Return or Enter.
        </p></feedback>
      </choice>
      <choice>
        <statement>
          <p>
            <c>Darth is the epitome of Star Wars!</c>
          </p>
        </statement>
        <feedback><p>
          Check the manner in which the user input is acquired.
        </p></feedback>
      </choice>
      <choice>
        <statement>
          <p>
            <c>D is the epitome of Star Wars!</c>
          </p>
        </statement>
        <feedback><p>
          Try Again! Pay attention to the way in which user input is recieved.
        </p></feedback>
      </choice>
    </choices>
  </exercise>
</exercises>
